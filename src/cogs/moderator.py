import asyncio
from typing import List, Literal, TypedDict

import discord
from discord import app_commands
from discord.ext import commands


class VoteType(TypedDict):
    message_id: int
    voting_type: Literal["kick", "ban"]
    member: discord.Member


class Moderator(commands.Cog, name="moderator"):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.voting_list: List[VoteType] = []

    @commands.hybrid_command(
        name="vote_kick",
        description="Vote to kick a member",
    )
    # @commands.bot_has_permissions(kick_members=True)
    @app_commands.describe(member="Member to be kicked")
    @app_commands.describe(reason="Reason why member are being kicked out")
    async def vote_kick(
        self,
        ctx: commands.Context,
        member: discord.Member,
        reason: str = None,
        timeout: float = 60.0,
    ):
        if member == self.bot.user:
            await ctx.send("Non, sao m√† k√≠ch ƒë∆∞·ª£c em =))")
            return

        if member.id == ctx.author.id:
            await ctx.send("Sao b·∫°n l·∫°i t·ª± kick ch√≠nh m√¨nh z·∫≠y =(")
            return

        if member.guild_permissions.administrator:
            msg = "Kh√¥ng th·ªÉ kick ƒë∆∞·ª£c admin b·∫°n ∆°i, b·∫°n mu·ªën ƒë·∫£o ch√≠nh h·∫£ :("
            await ctx.send(msg)
            return

        # Check if bot has permission to kick members
        if not ctx.guild.me.guild_permissions.kick_members:
            await ctx.send(
                "Tui hog c√≥ quy·ªÅn kick member ·ªùi b·∫°n ∆°i :(",
            )
            return

        # Check if member is already in the voting list
        in_voting = [e for e in self.voting_list if e["member"] == member]
        if len(in_voting):
            await ctx.send(f"{member.mention} ƒëang trong poll vote r·ªìi.")
            return

        # Get member list not include the bots
        members = [mem for mem in ctx.guild.members if mem.bot is False]

        # Send a message to the channel asking users to vote
        resp_embed = discord.Embed(
            title="Vote kick member",
            description=f"""
                C√≥ n√™n k√≠ch {member.mention} ko ae?
                L√Ω do: {reason or 'H·ªïng c√≥ l√Ω do'}
                React like üëç ƒë·ªÉ kich, üëé ƒë·ªÉ kh√¥ng k√≠ch.

                C√°i poll n√†y s·∫Ω h·∫øt h·∫°n sau {timeout} gi√¢y.
                N·∫øu nh∆∞ h·∫øt h·∫°n m√† ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán th√¨ s·∫Ω kh√¥ng k√≠ch.

                ƒêi·ªÅu ki·ªán k√≠ch nh∆∞ sau:
                  - S·ªë up vote nhi·ªÅu h∆°n down vote
                  - S·ªë up vote ph·∫£i h∆°n 1 n·ª≠a s·ªë th√†nh vi√™n trong server
                  (kh√¥ng t√≠nh bot)

                S·ªë th√†nh vi√™n: {len(members)}
                Up vote ƒë·ªÉ b·ªã k√≠ch: {len(members) // 2}

                {ctx.author.mention} ƒê·ªÉ h·ªßy poll n√†y, react ‚ùå.
            """,
            color=discord.Color.blue(),
        )
        message = await ctx.send(embed=resp_embed)
        # Add reactions to the message
        await message.add_reaction("üëç")
        await message.add_reaction("üëé")
        await message.add_reaction("‚ùå")

        def check(
            reaction: discord.Reaction,
            user: discord.User,
        ) -> bool:
            # Stop the poll if the user who started the poll reacts with ‚ùå
            return (
                reaction.message.id == message.id
                and user == ctx.author
                and reaction.emoji == "‚ùå"
            )

        voting_idx = None
        try:
            # Add voting to the list
            voting_idx = len(self.voting_list)
            self.voting_list.append(
                {
                    "message_id": message.id,
                    "voting_type": "kick",
                    "member": member,
                }
            )

            await self.bot.wait_for(
                "reaction_add",
                check=check,
                timeout=timeout,
            )
        except asyncio.TimeoutError:
            pass
        finally:
            # Get the updated message with reactions
            message = await message.channel.fetch_message(message.id)

            # Count the number of yes and no votes
            yes_votes = 0
            no_votes = 0
            for reaction in message.reactions:
                if reaction.emoji == "‚ùå":
                    # Check if poll was closed by the user who started the poll
                    async for user in reaction.users():
                        if user == ctx.author:
                            msg = discord.Embed(
                                title="Poll ƒë√£ b·ªã h·ªßy",
                                description="""
                                    Poll ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi t·∫°o poll.
                                """,
                                color=discord.Color.red(),
                            )
                            await message.edit(embed=msg)
                            await message.clear_reactions()
                            return

                if reaction.emoji == "üëç":
                    yes_votes = (
                        reaction.count - 1
                    )  # Subtract 1 to exclude the bot's own reaction
                elif reaction.emoji == "üëé":
                    no_votes = (
                        reaction.count - 1
                    )  # Subtract 1 to exclude the bot's own reaction

            # Check if the vote passes (50% or more yes votes)
            if yes_votes >= len(members) // 2 and yes_votes > no_votes:
                try:
                    await member.kick(
                        reason=reason or "B·∫°n b·ªã k√≠ch b·ªüi vote kick poll."
                    )
                    await ctx.send(f"{member.mention} ƒë√£ b·ªã k√≠ch kh·ªèi server.")
                except discord.Forbidden as err:
                    self.bot.logger.exception(err)
                    await ctx.send(
                        f"Tui hog c√≥ quy·ªÅn ƒë·ªÉ k√≠ch {member.mention} :_("
                    )
            else:
                await ctx.send(
                    f"Poll vote k√≠ch {member.mention} kh√¥ng ƒë·∫°t ƒëi·ªÅu ki·ªán.",
                )

            # Remove voting from the list
            if voting_idx is not None:
                self.voting_list.pop(voting_idx)

    @commands.hybrid_command(
        name="vote_ban",
        description="Vote to ban a member",
    )
    # @commands.bot_has_permissions(kick_members=True)
    @app_commands.describe(member="Member to be banned")
    @app_commands.describe(reason="Reason why member are being banned")
    async def vote_ban(
        self,
        ctx: commands.Context,
        member: discord.Member,
        reason: str = None,
        timeout: float = 60.0,
    ):
        if member == self.bot.user:
            await ctx.send("Non, sao m√† ban ƒë∆∞·ª£c em =))")
            return

        if member.id == ctx.author.id:
            await ctx.send("Sao b·∫°n l·∫°i t·ª± ban ch√≠nh m√¨nh z·∫≠y =(")
            return

        if member.guild_permissions.administrator:
            msg = "Kh√¥ng th·ªÉ ban ƒë∆∞·ª£c admin b·∫°n ∆°i, b·∫°n mu·ªën ƒë·∫£o ch√≠nh h·∫£ :("
            await ctx.send(msg)
            return

        # Check if bot has permission to kick members
        if not ctx.guild.me.guild_permissions.kick_members:
            await ctx.send(
                "Tui hog c√≥ quy·ªÅn ban member ·ªùi b·∫°n ∆°i :(",
            )
            return

        # Check if member is already in the voting list
        in_voting = [e for e in self.voting_list if e["member"] == member]
        if len(in_voting):
            await ctx.send(f"{member.mention} ƒëang trong poll vote r·ªìi.")
            return

        # Get member list not include the bots
        members = [mem for mem in ctx.guild.members if mem.bot is False]

        # Send a message to the channel asking users to vote
        resp_embed = discord.Embed(
            title="Vote ban member",
            description=f"""
                C√≥ n√™n ban {member.mention} ko ae?
                L√Ω do: {reason or 'H·ªïng c√≥ l√Ω do'}
                React like üëç ƒë·ªÉ ban, üëé ƒë·ªÉ kh√¥ng ban.

                **L∆∞u √Ω: User b·ªã ban s·∫Ω kh√¥ng th·ªÉ ƒë∆∞·ª£c m·ªùi l·∫°i v√†o server
                tr·ª´ khi ƒë∆∞·ª£c x√≥a kh·ªèi blacklist**

                C√°i poll n√†y s·∫Ω h·∫øt h·∫°n sau {timeout} gi√¢y.
                N·∫øu nh∆∞ h·∫øt h·∫°n m√† ch∆∞a ƒë·∫°t ƒëi·ªÅu ki·ªán th√¨ s·∫Ω kh√¥ng k√≠ch.

                ƒêi·ªÅu ki·ªán ban nh∆∞ sau:
                  - S·ªë up vote nhi·ªÅu h∆°n down vote
                  - S·ªë up vote ph·∫£i h∆°n 1 n·ª≠a s·ªë th√†nh vi√™n trong server
                  (kh√¥ng t√≠nh bot)

                S·ªë th√†nh vi√™n: {len(members)}
                Up vote ƒë·ªÉ b·ªã ban: {len(members) // 2}

                {ctx.author.mention} ƒê·ªÉ h·ªßy poll n√†y, react ‚ùå.
            """,
            color=discord.Color.blue(),
        )
        message = await ctx.send(embed=resp_embed)
        # Add reactions to the message
        await message.add_reaction("üëç")
        await message.add_reaction("üëé")
        await message.add_reaction("‚ùå")

        def check(
            reaction: discord.Reaction,
            user: discord.User,
        ) -> bool:
            # Stop the poll if the user who started the poll reacts with ‚ùå
            return (
                reaction.message.id == message.id
                and user == ctx.author
                and reaction.emoji == "‚ùå"
            )

        voting_idx = None
        try:
            # Add voting to the list
            voting_idx = len(self.voting_list)
            self.voting_list.append(
                {
                    "message_id": message.id,
                    "voting_type": "ban",
                    "member": member,
                }
            )

            await self.bot.wait_for(
                "reaction_add",
                check=check,
                timeout=timeout,
            )
        except asyncio.TimeoutError:
            pass
        finally:
            # Get the updated message with reactions
            message = await message.channel.fetch_message(message.id)

            # Count the number of yes and no votes
            yes_votes = 0
            no_votes = 0
            for reaction in message.reactions:
                if reaction.emoji == "‚ùå":
                    # Check if poll was closed by the user who started the poll
                    async for user in reaction.users():
                        if user == ctx.author:
                            msg = discord.Embed(
                                title="Poll ƒë√£ b·ªã h·ªßy",
                                description="""
                                    Poll ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi t·∫°o poll.
                                """,
                                color=discord.Color.red(),
                            )
                            await message.edit(embed=msg)
                            await message.clear_reactions()
                            return

                if reaction.emoji == "üëç":
                    yes_votes = (
                        reaction.count - 1
                    )  # Subtract 1 to exclude the bot's own reaction
                elif reaction.emoji == "üëé":
                    no_votes = (
                        reaction.count - 1
                    )  # Subtract 1 to exclude the bot's own reaction

            # Check if the vote passes (50% or more yes votes)
            if yes_votes >= len(members) // 2 and yes_votes > no_votes:
                try:
                    await member.ban(
                        reason=reason or "B·∫°n b·ªã ban b·ªüi vote kick poll."
                    )
                    await ctx.send(f"{member.mention} ƒë√£ b·ªã ban kh·ªèi server.")
                except discord.Forbidden as err:
                    self.bot.logger.exception(err)
                    await ctx.send(
                        f"Tui hog c√≥ quy·ªÅn ƒë·ªÉ ban {member.mention} :_("
                    )
            else:
                await ctx.send(
                    f"Poll vote ban {member.mention} kh√¥ng ƒë·∫°t ƒëi·ªÅu ki·ªán.",
                )

            # Remove voting from the list
            if voting_idx is not None:
                self.voting_list.pop(voting_idx)


async def setup(bot: commands.Bot) -> None:
    cog = Moderator(bot)
    await bot.add_cog(cog)
    cmd_names = [cmd.name for cmd in cog.get_commands()]
    bot.logger.info(f"Loaded extension '{cog.qualified_name}'")
    bot.logger.info(f"Commands of '{cog.qualified_name}: {cmd_names}'")
